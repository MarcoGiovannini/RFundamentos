example('ggplot2')
example('matplot')
14 %% 3
4**2
4^2
# PotÃªncia
4^2
4**2
# MÃ³dulo
14 %% 3
## Operadores BÃ¡sicos, relacionais e lÃ³gicos em R
# Operadores BÃ¡sicos
# Soma
4 + 4
# SubtraÃ§Ã£o
4 - 4
# MultiplicaÃ§Ã£o
4 * 4
# DivisÃ£o
4 / 4
# PotÃªncia
4^2
4**2
# MÃ³dulo
14 %% 3
# Atribuindo variÃ¡veis
a = 7
b = 5
# Operadores
a > 8
a < 8
a <= 8
a >= 8
a == 8
# Operadores LÃ³gicos
(a==8) & (b==6)
(a==8) | (b>5)
(a==8) | (b>=5)
(a==8) | (b>5)
a != 8
a > 8
print(!a > 8)
(a==8) | (b>5)
(a==8) | (b>5)
(a==8) | (b>5)
(a==8) | (b>=5)
8
a > 8
print(!a > 8)
getwd()
x
# Tipos de Dados em R
# Numeric - Todos os numeros criados em R sao do tipo numerico
num = 2.5
num
num2 = 4
num2
x = -123
x
class(x)
# Conversao de tipos Numeric
is.integer(num2)
y = as.integer(num2)
class(y)
x2 = 3.14
x2
y2 = as.integer(3.14)
y2
as.integer('4.27')
as.integer("Joe")
as.integer('Joe')
as.integer(TRUE)
# Character
char1 = 'A'
char1
char2 = "bolha"
char2
# Complex
compl = 2.5 + 4i
compl
class(compl)
sqrt(-1)
sqrt(-1+0i)
sqrt(as.complex(-1))
# Logic
x = 1; y = 2
z = x > y
z
class(z)
u = TRUE; v = FALSE
class(u)
u & v
u | v
!u
# Operacoes com 0
5/0
0/5
# Erro
'Joe'/5
x2 = 3.14
x2
y2 = as.integer(x2)
y2
as.integer('4.27')
as.integer("Joe")
as.integer('Joe')
as.integer(TRUE)
as.integer('4.27')
as.integer("Joe")
as.integer('Joe')
as.integer(TRUE)
# Complex
compl = 2.5 + 4i
compl
class(compl)
# Complex
compl = 2.5 + 4i
compl
class(compl)
# Complex
compl = 2.5 + 4i
compl
class(compl)
# Complex
compl = 2.5 + 4i
compl
class(compl)
# Complex
compl = 2.5 + 4i
compl
class(compl)
sqrt(-1)
sqrt(-1+0i)
sqrt(as.complex(-1))
# Logic
x = 1; y = 2
z = x > y
z
class(z)
u = TRUE; v = FALSE
class(u)
u & v
u | v
!u
# Operacoes com 0
5/0
0/5
# Erro
'Joe'/5
### Objetos em R
# Vetor: possui 1 dimensao e 1 tipo de dado
vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
# Matriz: possui 2 dimensoes e 1 tipo de dado
matriz1 <- matrix(1:10, nrow =2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
# Array: possui 2 ou mais dimensoes e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
# Data Frames: dados de diferentes tipos
# Maneira mais facil de explicar data frames: eh uma matriz com diferentes tipos de dados
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sÃƒÂ£o possiveis e comuns
lista1 <- list(a=matriz1, b=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
# FunÃƒÂ§ÃƒÂµes tambem sÃƒÂ£o vistas como objetos em R
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
# Removendo objetos
objects()
rm(array1, func1)
objects()
vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:10, nrow =2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim=c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a=matriz1, b=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
array1 <- array(1:5, dim=c(3,4,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
array1 <- array(1:5, dim=c(3,4,5))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sÃ£o possiveis e comuns
lista1 <- list(a=matriz1, b=vetor1)
lista1 <- list(a=matriz1, b=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
func1(2)
class(func1)
# Removendo objetos
objects()
rm(array1, func1)
objects()
func1(10)
func1(5)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
func1(55)
func1(5555555)
func1(5)
objects()
rm(array1, func1)
objects()
rm(array1, func1)
# Vetores
# Vetor de caracteres
vetor_caracter = c("Ola", "DSA")
vetor_caracter
# Vetor de floats
vetor_numerico = c(1.90, 45.3, 300.5)
vetor_numerico
# Vetor de valores complexos
vetor_complexo = c(5.2+3i, 3.8+4i)
vetor_complexo
# Vetor de valores logicos
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
# Vetor de numeros inteiros
vetor_integer  = c(2, 4, 6)
vetor_integer
# Utilizando seq()
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
# Utilizando rep()
vetor2 = rep(1:5)
vetor2
# Indexacao de vetores
a <- c(1,2,3,4,5)
a
a[1]
a[6]
b <- c("Data","Science")
b
b[1]
b[2]
b[3]
# Combinando vetores
v1 = c(2, 3, 5)
v2 = c("aa", "bb", "cc", "dd", "ee")
c(v1, v2)
# Operacoes com Vetores
x = c(1, 3, 5, 7)
y = c(2, 4, 6, 8)
x * 5
x + y
x - y
x * y
x / y
# Somando vetores com numero diferente de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
alfa + beta
# Vetor Nomeado
v = c("Barack", "Obama")
v
names(v) = c("Nome", "Sobrenome")
v
v["Nome"]
# Vetor de caracteres
vetor_caracter = c("Ola", "DSA")
vetor_caracter
View(matriz1)
# Vetores
# Conjunto de elementos da mesma natureza
# Vetor de caracteres
vetor_caracter = c("Ola", "DSA")
# Vetores
# Conjunto de elementos da mesma natureza
# Vetor de caracteres
vetor_caracter = c("Ola", "DSA")
vetor_caracter
# Vetor de floats
vetor_numerico = c(1.90, 45.3, 300.5)
vetor_numerico
# Vetor de valores complexos
vetor_complexo = c(5.2+3i, 3.8+4i)
vetor_complexo
# Vetor de valores logicos
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
# Vetor de numeros inteiros
vetor_integer  = c(2, 4, 6)
vetor_integer
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
vetor2 = rep(1:5)
vetor2
# Indexacao de vetores
a <- c(1,2,3,4,5)
a
a[1]
a[6]
b <- c("Data","Science")
b
b[1]
b[2]
b[3]
# Combinando vetores
v1 = c(2, 3, 5)
v2 = c("aa", "bb", "cc", "dd", "ee")
c(v1, v2)
# Operacoes com Vetores
x = c(1, 3, 5, 7)
y = c(2, 4, 6, 8)
x * 5
x + y
x - y
x * y
x / y
# Somando vetores com numero diferente de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
alfa + beta
# Vetor Nomeado
v = c("Barack", "Obama")
v
names(v) = c("Nome", "Sobrenome")
v
v["Nome"]
matrix (c(1,2,3,4,5,6), nr = 2)
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
matrix ( c ( 1,2,3,4,5,6), nc = 2)
?matrix
matrix ( c (1,2,3,4,5), nc = 2)
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = meus_dados, nrow = 5, ncol = 2)
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
mat[,2]
# Criando uma matriz diagonal
matriz = 1:3
diag (matriz)
# Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
diag (vetor)
# Transposta da matriz
W <- matrix ( c (2,4,8,12 ), nr =2, ncol = 2)
W
t(W)
solve(W)
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# Multiplicando Matriz com Vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
x * y
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
x * y
# Nomeando a Matriz
mat3 <- matrix(c('Futebol', 'Natacao', 'Campo', 'Piscina'), nr = 2)
mat3
dimnames(mat3) = (list( c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
mat3
# Identificando linhas e colunas no momento de criacao da Matriz
matrix (c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linha 1", "Linha 2" ), c( "Coluna 1", " Coluna 2") ))
# Combinando Matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4, mat5)
rbind(mat4, mat5)
# Desconstruindo a Matriz
c(mat4)
# Listas
# Use list() para criar listas
# Lista de strings
lista_caracter = list('A', 'Bem-vindo', 'DSA')
lista_caracter
# Lista de numeros inteiros
lista_inteiros = list(2, 3, 4)
lista_inteiros
# Lista de floats
lista_numerico = list(1.90, 45.3, 300.5)
lista_numerico
# Lista de numeros complexos
lista_complexos = list(5.2+3i, 2.4+8i)
lista_complexos
# Lista de valores logicos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
# Listas Compostas
lista_composta1 = list("A", 3, TRUE)
lista_composta1
lista1 <- list(1:10, c("Maria", "Joao", "Alfredo"), rnorm(10))
lista1
?rnorm
lista1 <- list(1:10, c("Maria", "Joao", "Alfredo"), rnorm(10))
lista1
lista1[1]
lista1[c(1,2)]
lista1[2]
lista1[1]
lista1[c(1,2)]
lista1[2]
lista1[[2]][1]
lista1[[2]][1] = "Monica"
lista1
# Para nomear os elementos - Listas Nomeadas
names(lista1) <- c("inteiros", "caracteres", "numericos")
lista1
vec_num <- 1:4
vec_char <- c("A", "B", "C", "D")
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
lista1$caracteres
length(lista1$inteiros)
lista1$inteiros
# Verificar o comprimento da lista
length(lista1)
# Podemos extrair um elemento especÃƒ­fico dentro de cada nivel da lista
lista1$caracteres[2]
# Mode dos elementos
mode(lista1$numericos)
mode(lista1$caracteres)
mat = matrix(1:4, nrow = 2)
mat
vec = c(1:9)
vec
lst = list(mat, vec)
lst
